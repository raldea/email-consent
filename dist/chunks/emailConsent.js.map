{"version":3,"file":"emailConsent.js","sources":["/@raldea/email-consent/src/api/fetch-graphql/fetch-graphql.ts","/@raldea/email-consent/src/api/emailConsent/emailConsent.ts"],"sourcesContent":["import { FetchGraphQL } from '@adobe-commerce/fetch-graphql';\n\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  setFetchGraphQlHeaders,\n  fetchGraphQl,\n  getConfig,\n} = new FetchGraphQL().getMethods();\n","/********************************************************************\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport {setEndpoint, fetchGraphQl} from '../fetch-graphql/index'\n\nexport const checkIfEmailExist = async (\n    email: string,\n    meshApiPoint: string\n) => {\n  let result = {};\n  const query = `\n  query GetProfileByEmail($email: String!) {\n    GetProfileByEmail(email: $email)\n  }\n `;\n\n  const variable = {\n    variables: {\n      \"email\": email\n    }\n  }\n\n  setEndpoint(meshApiPoint);\n  await fetchGraphQl(query, variable).then(\n      response => response.data\n  ).then(data => {\n    result = data;\n  }).catch(error => {\n    console.error(\"Error executing GraphQL mutation:\", error);\n  });\n\n  return result;\n}\n\nexport const createProfile = async (\n  data: object,\n  meshApiPoint: string\n) => {\n  let result = {};\n  const mutation = `\n  mutation CreateProfile($input: mutationInput_sendConsent_input_Input!) {\n    createProfile(\n    input: $input\n    )\n  }`;\n\n  const variable = {\n    variables: {\n      \"input\": data\n    }\n  }\n\n  setEndpoint(meshApiPoint);\n  await fetchGraphQl(mutation, variable).then(\n      response => response.data\n  ).then(data => {\n    result = data;\n  }).catch(error => {\n    console.error(\"Error executing GraphQL mutation:\", error);\n  });\n\n  return result;\n}\n\nexport const subscribeProfile = (\n    data: object,\n    meshApiPoint: string\n) => {\n  let result = {};\n  const mutation = `\n  mutation SendConsent($input: mutationInput_sendConsent_input_Input!) {\n    sendConsent(\n    input: $input\n    )\n  }`;\n\n  const variable = {\n    variables: {\n      \"input\": data\n    }\n  }\n\n  setEndpoint(meshApiPoint);\n  fetchGraphQl(mutation, variable).then(\n      response => response.data\n  ).then(data => {\n      result = data;\n  }).catch(error => {\n      console.error(\"Error executing GraphQL mutation:\", error);\n  });\n\n  return result;\n}\n"],"names":["setEndpoint","setFetchGraphQlHeader","removeFetchGraphQlHeader","setFetchGraphQlHeaders","fetchGraphQl","getConfig","FetchGraphQL","checkIfEmailExist","email","meshApiPoint","result","query","variable","response","data","error","createProfile","mutation","subscribeProfile"],"mappings":"+DAEO,KAAM,CACX,YAAAA,EACA,sBAAAC,EACA,yBAAAC,EACA,uBAAAC,EACA,aAAAC,EACA,UAAAC,CACF,EAAI,IAAIC,EAAA,EAAe,WAAA,ECEVC,EAAoB,MAC7BC,EACAC,IACC,CACH,IAAIC,EAAS,CAAA,EACb,MAAMC,EAAQ;AAAA;AAAA;AAAA;AAAA,GAMRC,EAAW,CACf,UAAW,CACT,MAASJ,CAAA,CACX,EAGF,OAAAR,EAAYS,CAAY,EACxB,MAAML,EAAaO,EAAOC,CAAQ,EAAE,QACpBC,EAAS,IAAA,EACvB,KAAKC,GAAQ,CACbJ,EAASI,CACX,CAAC,EAAE,MAAMC,GAAS,CAChB,QAAQ,MAAM,oCAAqCA,CAAK,CAC1D,CAAC,EAEML,CACT,EAEaM,EAAgB,MAC3BF,EACAL,IACG,CACH,IAAIC,EAAS,CAAA,EACb,MAAMO,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,KAOXL,EAAW,CACf,UAAW,CACT,MAASE,CAAA,CACX,EAGF,OAAAd,EAAYS,CAAY,EACxB,MAAML,EAAaa,EAAUL,CAAQ,EAAE,QACvBC,EAAS,IAAA,EACvB,KAAKC,GAAQ,CACbJ,EAASI,CACX,CAAC,EAAE,MAAMC,GAAS,CAChB,QAAQ,MAAM,oCAAqCA,CAAK,CAC1D,CAAC,EAEML,CACT,EAEaQ,EAAmB,CAC5BJ,EACAL,IACC,CACH,IAAIC,EAAS,CAAA,EACb,MAAMO,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,KAOXL,EAAW,CACf,UAAW,CACT,MAASE,CAAA,CACX,EAGF,OAAAd,EAAYS,CAAY,EACxBL,EAAaa,EAAUL,CAAQ,EAAE,QACjBC,EAAS,IAAA,EACvB,KAAKC,GAAQ,CACXJ,EAASI,CACb,CAAC,EAAE,MAAMC,GAAS,CACd,QAAQ,MAAM,oCAAqCA,CAAK,CAC5D,CAAC,EAEML,CACT"}