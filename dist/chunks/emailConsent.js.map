{"version":3,"file":"emailConsent.js","sources":["/@raldea/email-consent/src/api/emailConsent/emailConsent.ts"],"sourcesContent":["/********************************************************************\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\n\nexport const emailConsent = () => {\n  return 'Howdy!';\n}\n\nexport const checkIfEmailExist = (\n    email: string,\n    apiKey: string,\n    apiUrl: string,\n    apiRevision: string\n) => {\n  console.log(email);\n  console.log(apiKey);\n  console.log(apiUrl);\n  console.log(apiRevision);\n\n  // let qs = new URLSearchParams({\n  //   'filter': `equals(email,\"${email}\")`\n  // });\n\n  fetch('https://jsonplaceholder.typicode.com/posts/1')\n      .then(res => res.json())\n      .then(data => console.log(data))\n      .catch(err => console.error(err));\n\n  console.log('asda');\n\n  fetch('https://api.agify.io/?name=michael')\n      .then(res => res.json())\n      .then(data => console.log(data))\n      .catch(err => console.error(err));\n\n\n  const query = `\n  query getDetails {\n    products(filter: { sku: { eq: \"VA01\" } }) {\n      items {\n        name\n        sku\n        url_key\n        price_range {\n          minimum_price {\n            regular_price {\n              value\n              currency\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n  fetch(\"https://edge-sandbox-graph.adobe.io/api/3bb8eab1-35cb-4b38-ace9-46e6b4c6c3e7/graphql\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // Add your API key or authentication header if required:\n      // \"Authorization\": \"Bearer <YOUR_TOKEN>\"\n    },\n    body: JSON.stringify({ query })\n  })\n      .then(response => response.json())\n      .then(data => {\n        console.log(\"GraphQL response:\", data);\n      })\n      .catch(error => {\n        console.error(\"Error fetching GraphQL:\", error);\n      });\n\n  // fetch(`https://a.klaviyo.com/api/profiles?${qs}`, {\n  //   method: 'GET',\n  //   headers: {\n  //     accept: 'application/vnd.api+json',\n  //     Authorization: `Klaviyo-API-Key ${apiKey}`,\n  //     revision: apiRevision\n  //   }\n  // }).then(res => {\n  //   if (!res.ok) throw new Error(`HTTP ${res.status}`);\n  //     return res.json();\n  //   }\n  // ).then(json => {\n  //   const profile = json.data?.[0] ?? null;\n  //\n  //   if (!profile) {\n  //     console.log('No profile found for', email);\n  //   } else {\n  //     console.log('Profile:', profile);\n  //   }\n  //\n  //   return profile;\n  // }).catch(err => {\n  //   console.error('Klaviyo lookup failed:', err);\n  // }).finally(() => {\n  //   console.log('Lookup complete');\n  // });\n\n  return null;\n}\n"],"names":["emailConsent","checkIfEmailExist","email","apiKey","apiUrl","apiRevision","res","data","err","response","error"],"mappings":"AAUO,MAAMA,EAAe,IACnB,SAGIC,EAAoB,CAC7BC,EACAC,EACAC,EACAC,KAEF,QAAQ,IAAIH,CAAK,EACjB,QAAQ,IAAIC,CAAM,EAClB,QAAQ,IAAIC,CAAM,EAClB,QAAQ,IAAIC,CAAW,EAMvB,MAAM,8CAA8C,EAC/C,KAAKC,GAAOA,EAAI,KAAA,CAAM,EACtB,KAAKC,GAAQ,QAAQ,IAAIA,CAAI,CAAC,EAC9B,SAAa,QAAQ,MAAMC,CAAG,CAAC,EAEpC,QAAQ,IAAI,MAAM,EAElB,MAAM,oCAAoC,EACrC,KAAKF,GAAOA,EAAI,KAAA,CAAM,EACtB,KAAKC,GAAQ,QAAQ,IAAIA,CAAI,CAAC,EAC9B,SAAa,QAAQ,MAAMC,CAAG,CAAC,EAuBpC,MAAM,uFAAwF,CAC5F,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAIlB,KAAM,KAAK,UAAU,CAAE,MA3BX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BkB,CAAA,CAC/B,EACI,KAAKC,GAAYA,EAAS,MAAM,EAChC,KAAKF,GAAQ,CACZ,QAAQ,IAAI,oBAAqBA,CAAI,CACvC,CAAC,EACA,MAAMG,GAAS,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CAAC,EA6BE"}