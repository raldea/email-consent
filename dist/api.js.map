{"version":3,"file":"api.js","sources":["/@raldea/email-consent/src/api/initialize/initialize.ts","/@raldea/email-consent/src/api/fetch-graphql/fetch-graphql.ts","/@raldea/email-consent/src/api/emailConsent/emailConsent.ts"],"sourcesContent":["import { Initializer } from '@adobe-commerce/elsie/lib';\nimport { Lang } from '@adobe-commerce/elsie/i18n';\n// import { events } from '@adobe-commerce/event-bus';\n\ntype ConfigProps = {\n  langDefinitions?: Lang;\n};\n\nexport const initialize = new Initializer<ConfigProps>({\n  init: async (config) => {\n    const defaultConfig = {};\n\n    initialize.config.setConfig({ ...defaultConfig, ...config });\n  },\n\n  listeners: () => [\n    // events.on('authenticated', (authenticated) => {\n    //   console.log('authenticated', authenticated);\n    // }),\n  ],\n});\n\nexport const config = initialize.config;\n","import { FetchGraphQL } from '@adobe-commerce/fetch-graphql';\n\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  setFetchGraphQlHeaders,\n  fetchGraphQl,\n  getConfig,\n} = new FetchGraphQL().getMethods();\n","/********************************************************************\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\n\nexport const emailConsent = () => {\n  return 'Howdy!';\n}\n\nexport const checkIfEmailExist = (\n    email: string,\n    apiKey: string,\n    apiUrl: string,\n    apiRevision: string\n) => {\n  console.log(email);\n  console.log(apiKey);\n  console.log(apiUrl);\n  console.log(apiRevision);\n\n  // let qs = new URLSearchParams({\n  //   'filter': `equals(email,\"${email}\")`\n  // });\n  //\n  // fetch('https://jsonplaceholder.typicode.com/posts/1')\n  //     .then(res => res.json())\n  //     .then(data => console.log(data))\n  //     .catch(err => console.error(err));\n  //\n  // console.log('asda');\n  //\n  // fetch('https://api.agify.io/?name=michael')\n  //     .then(res => res.json())\n  //     .then(data => console.log(data))\n  //     .catch(err => console.error(err));\n\n\n\n  // fetch(`https://a.klaviyo.com/api/profiles?${qs}`, {\n  //   method: 'GET',\n  //   headers: {\n  //     accept: 'application/vnd.api+json',\n  //     Authorization: `Klaviyo-API-Key ${apiKey}`,\n  //     revision: apiRevision\n  //   }\n  // }).then(res => {\n  //   if (!res.ok) throw new Error(`HTTP ${res.status}`);\n  //     return res.json();\n  //   }\n  // ).then(json => {\n  //   const profile = json.data?.[0] ?? null;\n  //\n  //   if (!profile) {\n  //     console.log('No profile found for', email);\n  //   } else {\n  //     console.log('Profile:', profile);\n  //   }\n  //\n  //   return profile;\n  // }).catch(err => {\n  //   console.error('Klaviyo lookup failed:', err);\n  // }).finally(() => {\n  //   console.log('Lookup complete');\n  // });\n\n  return null;\n}\n\nexport const subscribeProfile = (\n    data: object,\n    meshApiPoint: string\n) => {\n  const mutation = `\n  mutation CreateProfile($revision: String!, $input: CreateProfileInput!) {\n    create_profile(\n    revision: $revision\n    input: $input\n    ) {\n      data {\n        type\n        id\n        attributes {\n          email\n        }\n        relationships\n      }\n    }\n  }`;\n\n  const variables = {\n    revision: \"2025-04-15\",\n    input: {\n      data: {\n        type: \"profile\",\n        attributes: {\n          first_name: \"johnc\",\n          email: \"john.doe@example.com\"\n        }\n      }\n    }\n  };\n\n  fetch(meshApiPoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: mutation,\n      variables\n    })\n  }).then(\n    response => response.json()\n  ).then(data => {\n    console.log(\"GraphQL mutation response:\", data);\n\n    return data;\n  }).catch(error => {\n    console.error(\"Error executing GraphQL mutation:\", error);\n  });\n\n  return null;\n}\n"],"names":["initialize","Initializer","config","defaultConfig","setEndpoint","setFetchGraphQlHeader","removeFetchGraphQlHeader","setFetchGraphQlHeaders","fetchGraphQl","getConfig","FetchGraphQL","emailConsent","checkIfEmailExist","email","apiKey","apiUrl","apiRevision","subscribeProfile","data","meshApiPoint","response","error"],"mappings":"mHAQO,MAAMA,EAAa,IAAIC,EAAyB,CACrD,KAAM,MAAOC,GAAW,CACtB,MAAMC,EAAgB,CAAA,EAEtBH,EAAW,OAAO,UAAU,CAAE,GAAGG,EAAe,GAAGD,EAAQ,CAC7D,EAEA,UAAW,IAAM,CAAA,CAKnB,CAAC,EAEYA,EAASF,EAAW,OCpBpB,CACX,YAAAI,EACA,sBAAAC,EACA,yBAAAC,EACA,uBAAAC,EACA,aAAAC,EACA,UAAAC,CACF,EAAI,IAAIC,EAAA,EAAe,WAAA,ECCVC,EAAe,IACnB,SAGIC,EAAoB,CAC7BC,EACAC,EACAC,EACAC,KAEF,QAAQ,IAAIH,CAAK,EACjB,QAAQ,IAAIC,CAAM,EAClB,QAAQ,IAAIC,CAAM,EAClB,QAAQ,IAAIC,CAAW,EA+ChB,MAGIC,EAAmB,CAC5BC,EACAC,KAgCF,MAAMA,EAAc,CAClB,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CACnB,MApCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqCb,UApBc,CAChB,SAAU,aACV,MAAO,CACL,KAAM,CACJ,KAAM,UACN,WAAY,CACV,WAAY,QACZ,MAAO,sBAAA,CACT,CACF,CACF,CAUE,CACD,CAAA,CACF,EAAE,KACDC,GAAYA,EAAS,KAAA,CAAK,EAC1B,KAAKF,IACL,QAAQ,IAAI,6BAA8BA,CAAI,EAEvCA,EACR,EAAE,MAAMG,GAAS,CAChB,QAAQ,MAAM,oCAAqCA,CAAK,CAC1D,CAAC,EAEM"}